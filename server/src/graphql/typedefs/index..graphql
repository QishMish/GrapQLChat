type Query {
  #user
  me: UserDto
  getUserByUsername(username: String!): UserDto

  #chat
  fetchChatrooms: [ChatRoom]!
  fetchChatroomMessages(chatroomId: ID!, offSet: Int, limit: Int): ChatRoom
  fetchActiveUsers: [User]

  #admin
  getUsers: [UserDto]!
  getUserById(userId: ID!): UserDto

  #chat
  fetchChatRoomUsers(chatroomId: ID!): [UserDto!]!
}
type Mutation {
  #user
  signUpUser(signUpUserInput: SignUpUserInput!): AuthResponse!
  signInUser(signInUserInput: SignInUserInput!): AuthResponse!
  signOutUser: GenericResponse
  refreshAccessToken: AuthResponse!
  updateUser(userId: ID!, updateUserInput: UpdateUserInput!): UserDto
  deleteUser(userId: ID!): UserDto

  #admin
  deactivateUser(userId: ID!): GenericResponse!
  activateUser(userId: ID!): GenericResponse!

  #chat
  sendNewMessage(chatroomId: ID!, newMessageInput: NewMessageInput!): Message!
  deleteMessage(messageId: ID!): GenericResponse!
  createChatroomGroup(
    # userId: ID
    createChatroomGroupInput: CreateChatroomGroupInput!
  ): ChatRoom!
  addChatRoomGroupMembers(
    userId: ID!
    chatroomId: ID!
    addChatRoomGroupMembersInput: [AddChatRoomGroupMembersInput!]!
  ): GenericResponse!
  removeChatRoomGroupMembers(
    userId: ID!
    chatroomId: ID!
    removeChatRoomGroupMemberInput: [RemoveChatRoomGroupMemberInput!]!
  ): GenericResponse!
  deleteConversation(userId: ID, chatroomId: ID!): GenericResponse!

  #admin
  sendChatMessageFromAdministration(
    chatroomId: ID!
    newMessageInput: NewMessageInput!
  ): GenericResponse!
  removeMessage(messageId: ID!): GenericResponse!
  deleteChatroomGroup(userId: ID!, chatroomId: ID!): GenericResponse!
}
type Subscription {
  onNewMessageCreated(chatroomId: ID!): Message
  onMessageDeleted(chatroomId: ID!): Message
  activeUsers: [UserDto]
}
